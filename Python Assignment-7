1.	he feature responsible for generating Regex objects is the re module in Python.
2.	Raw strings (prefixed with r) are often used in Regex objects to avoid interpreting backslashes as escape characters. This is helpful because backslashes are commonly used in regular expressions, and using a raw string prevents unintended escape sequence interpretation.
3.	The search() method returns a Match object if a match is found, and None otherwise.
4.	To get the actual strings that match the pattern from a Match object, you can use the group() method. For example, match.group() returns the entire matched string.
5.	In the regex r'(\d\d\d)-(\d\d\d-\d\d\d\d)', group 0 covers the entire match, group 1 covers the first set of three digits, and group 2 covers the second set of three digits separated by a hyphen.
6.	To match real parentheses and periods in a regex, you can precede them with a backslash (\(, \), \.).
7.	The findall() method returns a list of strings when there are no groups in the regular expression, and it returns a list of tuples of strings when there are groups.
8.	In standard expressions, the | character represents the OR operator, allowing you to match either of the patterns on its left or right side.
9.	In regular expressions, the . character (dot) stands for any character except a newline.
10.	In regular expressions, the + character matches one or more occurrences of the preceding character or group, while the * character matches zero or more occurrences.
11.	{4} in a regular expression matches exactly four occurrences of the preceding character or group, while {4,5} matches between four and five occurrences.
12.	In regular expressions, the shorthand character classes \d, \w, and \s signify:
•	\d: Any digit (0-9).
•	\w: Any word character (alphanumeric + underscore).
•	\s: Any whitespace character (space, tab, newline).
13.	In regular expressions, the shorthand character classes \D, \W, and \S signify the negations of the above:
•	\D: Any non-digit.
•	\W: Any non-word character.
•	\S: Any non-whitespace character.
14.	.*? is a non-greedy match, matching as little text as possible, while .* is a greedy match, matching as much text as possible.
15.	The syntax for matching both numbers and lowercase letters with a character class is [0-9a-z] or [a-z0-9].
16.	To make a regular expression case insensitive, you can use the re.IGNORECASE flag when compiling the regex or use (?i) within the pattern.
17.	The . character normally matches any character except a newline. If re.DOTALL is passed as the second argument in re.compile(), the . character will match any character, including a newline.
18.	numRegex.sub('X', '11 drummers, 10 pipers, five rings, 4 hen') will return 'X drummers, X pipers, five rings, X hen'.
19.	Passing re.VERBOSE as the second argument to re.compile() allows for the use of whitespace and comments within the regular expression pattern for better readability.
20.	To match a number with commas for every three digits, you can use the regex pattern r'\d{1,3}(,\d{3})*'.

