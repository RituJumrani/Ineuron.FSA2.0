# 1. How many seconds are in an hour?
seconds_in_minute = 60
minutes_in_hour = 60
seconds_per_hour = seconds_in_minute * minutes_in_hour
print(seconds_per_hour)  # Output: 3600

# 2. Assign the result from the previous task (seconds in an hour) to a variable called seconds_per_hour.
seconds_per_hour = 3600

# 3. How many seconds do you think there are in a day? Make use of the variables seconds per hour and minutes per hour.
# There are 24 hours in a day.
seconds_per_day = seconds_per_hour * 24
print(seconds_per_day)  # Output: 86400

# 4. Calculate seconds per day again, but this time save the result in a variable called seconds_per_day
seconds_per_day = seconds_per_hour * 24

# 5. Divide seconds_per_day by seconds_per_hour. Use floating-point (/) division.
result_float = seconds_per_day / seconds_per_hour
print(result_float)  # Output: 24.0

# 6. Divide seconds_per_day by seconds_per_hour, using integer (//) division.
result_integer = seconds_per_day // seconds_per_hour
print(result_integer)  # Output: 24

# 7. Write a generator, genPrimes, that returns the sequence of prime numbers on successive calls to its next() method: 2, 3, 5, 7, 11, ...
def genPrimes():
    primes = []
    n = 2
    while True:
        is_prime = all(n % prime != 0 for prime in primes)
        if is_prime:
            primes.append(n)
            yield n
        n += 1

# Example usage of genPrimes
prime_generator = genPrimes()
print(next(prime_generator))  # Output: 2
print(next(prime_generator))  # Output: 3
print(next(prime_generator))  # Output: 5
print(next(prime_generator))  # Output: 7
print(next(prime_generator))  # Output: 11
# ...
